import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils

apply plugin: 'com.android.application'

android {
    //noinspection GradleCompatible
    compileSdkVersion 27
    //buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "ntx.note"
        minSdkVersion 19
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 19
        versionCode 50802
        versionName "5.8.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
            checkReleaseBuilds false
            abortOnError false
    }
    buildToolsVersion '28.0.3'
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.greenrobot:eventbus:3.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //    implementation 'com.android.support:multidex:1.0.3'
    //    implementation 'com.android.support:support-v4:27.1.1'
    //    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    //    implementation 'com.android.support:design:27.1.1'
    //    testImplementation 'junit:junit:4.12'
    //    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.dropbox.core:dropbox-core-sdk:3.0.10'
    //    api files('apiLibs/dropbox-sync-sdk-android.jar')
    api files('libs/javalib.jar')
    api files('libs/ntx_android_bt_net_classes.jar')
    api files('libs/ntx_android_graphics_classes.jar')
    api files('libs/ntx_android_os_classes.jar')
    api files('libs/ntx_android_view_classes.jar')
    api files('libs/google-play-services.jar')
    //    compile files('libs/android-support-v4.jar')

    implementation "com.myscript:iink:1.3.1"

}


task DownloadAndExtractAssets(type: Copy) {
    def sourceUrls = ['https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-diagram.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-raw-content.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-math.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-text-en_US.zip']
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")
        def zipDir = new File(tmpAssetsDir, "zips")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        if (!zipDir.isDirectory())
            zipDir.mkdirs()

        sourceUrls.each { sourceUrl ->
            ant.get(src: sourceUrl, dest: zipDir.getPath())
        }

        File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
        zipFiles.each { File zipFile ->
            from zipTree(zipFile)
            into tmpAssetsDir
        }
    }
}

task CopyAssets(type: Copy, dependsOn: DownloadAndExtractAssets) {
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        def recognitionAssetDir = new File(tmpAssetsDir, "recognition-assets/")

        println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
        from recognitionAssetDir
        into targetDir

        doLast {
            tmpAssetsDir.deleteDir()
        }
    }
}

preBuild.dependsOn(CopyAssets)